<?php

namespace App\Http\Requests\Api\Auth;

use App\Enums\UserGender;
use App\Enums\UserType;
use App\Helpers\Helpers;
use App\Http\Requests\Api\ApiFormRequest;
use BenSampo\Enum\Rules\EnumValue;
use Hash;
use Illuminate\Auth\Events\Lockout;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;
use Illuminate\Validation\ValidationException;

class UpdateMeRequest extends ApiFormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return auth()->check();
    }


    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            "first_name"=> ['nullable','persian_alpha'],
            "last_name"=> ['nullable','persian_alpha'],
            "national_number"=> ['nullable','ir_national_code','unique:App\Models\User,national_number'],
            "state_id"=> [
                'nullable',
                'exists:App\Models\State,id'
            ],
            "city_id"=> [
                'nullable',
                'exists:App\Models\City,id'
            ],
            "email"=> [
                'nullable',
                'email:rfc,dns',
                Rule::unique('users','email')->ignore(\auth()->id(),'id')
            ],
            "mobile"=> [
                'nullable',
                'ir_mobile',
                Rule::unique('users','mobile')->ignore(\auth()->id(),'id')
            ],
            "password" => ['nullable'],
            "confirm" => ['required_with:password','same:password'],
//            "type"=> [
//                'nullable',
//            ],
            "gender"=> [
                'nullable',
            ],
            "avatar"=> [
                'nullable',
                Rule::exists('media','uuid')->where('model_type','temporary_upload')
            ],
        ];
    }
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function messages()
    {
        return [
            "national_number"=> 'کد ملی نامعتبر است',
            'city_id' => 'شهر انتخابی صحیح نمیباشد',
        ];
    }

    protected function prepareForValidation()
    {
        parent::prepareForValidation(); // TODO: Change the autogenerated stub
        if($this->has('mobile')) {
            $this->merge([
                'mobile' => Helpers::mobileNumberNormalize($this->input('mobile'))
            ]);
        }
/*        if($this->has('password')){
            $hashedNewPassword = Hash::make($this->input('password'));
            // check if user has password
            if(!is_null(\auth()->user()->password)){
                //check if old password != new password update
                $hashedOldPassword = \auth()->user()->password;

                if(!Hash::check($this->input('password'),$hashedOldPassword)){
                    $this->merge([
                        'password'=> $hashedNewPassword,
                    ]);
                }
            } else {
                // update password
                $this->merge([
                    'password'=> $hashedNewPassword,
                ]);
            }
        }*/
    }

}
