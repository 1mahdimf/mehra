<?php

namespace App\Http\Requests\Api\Shipping;

use App\Enums\ProductStructure;
use App\Enums\ProductType;
use App\Enums\ShippingType;
use App\Http\Requests\Api\ApiFormRequest;
use App\Models\Cart;
use App\Services\CartService;
use Illuminate\Validation\Rule;
use Illuminate\Validation\ValidationException;

class CalculateShippingRequest extends ApiFormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, mixed>
     */
    public function rules()
    {
        return [
            'type'=> [
                'required',
                Rule::in(ShippingType::asArray())
            ]
        ];
    }

    public function messages()
    {
        return [

        ];
    }

    protected function prepareForValidation()
    {
        parent::prepareForValidation(); // TODO: Change the autogenerated stub
        $this->cart = (new CartService())->getCart();
        if($this->cart->exists()){
            foreach ($this->cart->items as $item){
                if($item->line_item->type==ProductType::PRINTED_BOOK || $item->line_item->type==ProductType::CD){
                    $this->rules = [
                        'address_id'=> [
                            'required',
                            Rule::exists('user_addresses','id')->where('user_id',auth()->id()),
                        ],
                    ];
                }
            }
        }
        else {
            throw ValidationException::withMessages(['cart_is_empty' => 'سبد خرید شما خالی است!']);
        }
    }

    protected function passedValidation()
    {
        if($this->cart && $this->cart->exists() && $this->request->has('address_id'))
        {
            $this->cart->update(['address_id' =>$this->request->get('address_id')]);
        }
    }
}
